// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "exchange.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BINAssetConfigRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINAssetConfigRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINAsset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINAsset_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINAssetConfigResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINAssetConfigResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINExchangeAssetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINExchangeAssetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINExchangeAssetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINExchangeAssetResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_exchange_2eproto() {
  protobuf_AddDesc_exchange_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "exchange.proto");
  GOOGLE_CHECK(file != NULL);
  BINAssetConfigRequest_descriptor_ = file->message_type(0);
  static const int BINAssetConfigRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINAssetConfigRequest, type_),
  };
  BINAssetConfigRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINAssetConfigRequest_descriptor_,
      BINAssetConfigRequest::default_instance_,
      BINAssetConfigRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINAssetConfigRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINAssetConfigRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINAssetConfigRequest));
  BINAsset_descriptor_ = file->message_type(1);
  static const int BINAsset_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINAsset, assetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINAsset, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINAsset, provider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINAsset, parvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINAsset, cashvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINAsset, trustedindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINAsset, active_),
  };
  BINAsset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINAsset_descriptor_,
      BINAsset::default_instance_,
      BINAsset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINAsset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINAsset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINAsset));
  BINAssetConfigResponse_descriptor_ = file->message_type(2);
  static const int BINAssetConfigResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINAssetConfigResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINAssetConfigResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINAssetConfigResponse, assets_),
  };
  BINAssetConfigResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINAssetConfigResponse_descriptor_,
      BINAssetConfigResponse::default_instance_,
      BINAssetConfigResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINAssetConfigResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINAssetConfigResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINAssetConfigResponse));
  BINExchangeAssetRequest_descriptor_ = file->message_type(3);
  static const int BINExchangeAssetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExchangeAssetRequest, assetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExchangeAssetRequest, amount_),
  };
  BINExchangeAssetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINExchangeAssetRequest_descriptor_,
      BINExchangeAssetRequest::default_instance_,
      BINExchangeAssetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExchangeAssetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExchangeAssetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINExchangeAssetRequest));
  BINExchangeAssetResponse_descriptor_ = file->message_type(4);
  static const int BINExchangeAssetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExchangeAssetResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExchangeAssetResponse, message_),
  };
  BINExchangeAssetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINExchangeAssetResponse_descriptor_,
      BINExchangeAssetResponse::default_instance_,
      BINExchangeAssetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExchangeAssetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExchangeAssetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINExchangeAssetResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_exchange_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINAssetConfigRequest_descriptor_, &BINAssetConfigRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINAsset_descriptor_, &BINAsset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINAssetConfigResponse_descriptor_, &BINAssetConfigResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINExchangeAssetRequest_descriptor_, &BINExchangeAssetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINExchangeAssetResponse_descriptor_, &BINExchangeAssetResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_exchange_2eproto() {
  delete BINAssetConfigRequest::default_instance_;
  delete BINAssetConfigRequest_reflection_;
  delete BINAsset::default_instance_;
  delete BINAsset_reflection_;
  delete BINAssetConfigResponse::default_instance_;
  delete BINAssetConfigResponse_reflection_;
  delete BINExchangeAssetRequest::default_instance_;
  delete BINExchangeAssetRequest_reflection_;
  delete BINExchangeAssetResponse::default_instance_;
  delete BINExchangeAssetResponse_reflection_;
}

void protobuf_AddDesc_exchange_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016exchange.proto\"%\n\025BINAssetConfigReques"
    "t\022\014\n\004type\030\001 \002(\005\"\206\001\n\010BINAsset\022\017\n\007assetId\030"
    "\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\020\n\010provider\030\003 \002(\t\022\020\n"
    "\010parValue\030\004 \001(\003\022\021\n\tcashValue\030\005 \002(\003\022\024\n\014tr"
    "ustedIndex\030\006 \002(\005\022\016\n\006active\030\007 \002(\010\"Z\n\026BINA"
    "ssetConfigResponse\022\024\n\014responseCode\030\001 \002(\010"
    "\022\017\n\007message\030\002 \001(\t\022\031\n\006assets\030\003 \003(\0132\t.BINA"
    "sset\":\n\027BINExchangeAssetRequest\022\017\n\007asset"
    "Id\030\001 \002(\005\022\016\n\006amount\030\002 \002(\005\"A\n\030BINExchangeA"
    "ssetResponse\022\024\n\014responseCode\030\001 \002(\010\022\017\n\007me"
    "ssage\030\002 \001(\tB\036\n\034com.mi.game.network.data."
    "bin", 443);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "exchange.proto", &protobuf_RegisterTypes);
  BINAssetConfigRequest::default_instance_ = new BINAssetConfigRequest();
  BINAsset::default_instance_ = new BINAsset();
  BINAssetConfigResponse::default_instance_ = new BINAssetConfigResponse();
  BINExchangeAssetRequest::default_instance_ = new BINExchangeAssetRequest();
  BINExchangeAssetResponse::default_instance_ = new BINExchangeAssetResponse();
  BINAssetConfigRequest::default_instance_->InitAsDefaultInstance();
  BINAsset::default_instance_->InitAsDefaultInstance();
  BINAssetConfigResponse::default_instance_->InitAsDefaultInstance();
  BINExchangeAssetRequest::default_instance_->InitAsDefaultInstance();
  BINExchangeAssetResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_exchange_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_exchange_2eproto {
  StaticDescriptorInitializer_exchange_2eproto() {
    protobuf_AddDesc_exchange_2eproto();
  }
} static_descriptor_initializer_exchange_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BINAssetConfigRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

BINAssetConfigRequest::BINAssetConfigRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINAssetConfigRequest::InitAsDefaultInstance() {
}

BINAssetConfigRequest::BINAssetConfigRequest(const BINAssetConfigRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINAssetConfigRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINAssetConfigRequest::~BINAssetConfigRequest() {
  SharedDtor();
}

void BINAssetConfigRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINAssetConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINAssetConfigRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINAssetConfigRequest_descriptor_;
}

const BINAssetConfigRequest& BINAssetConfigRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_2eproto();
  return *default_instance_;
}

BINAssetConfigRequest* BINAssetConfigRequest::default_instance_ = NULL;

BINAssetConfigRequest* BINAssetConfigRequest::New() const {
  return new BINAssetConfigRequest;
}

void BINAssetConfigRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINAssetConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINAssetConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINAssetConfigRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINAssetConfigRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINAssetConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINAssetConfigRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINAssetConfigRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINAssetConfigRequest::MergeFrom(const BINAssetConfigRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINAssetConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINAssetConfigRequest::CopyFrom(const BINAssetConfigRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINAssetConfigRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINAssetConfigRequest::Swap(BINAssetConfigRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINAssetConfigRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINAssetConfigRequest_descriptor_;
  metadata.reflection = BINAssetConfigRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINAsset::kAssetIdFieldNumber;
const int BINAsset::kTypeFieldNumber;
const int BINAsset::kProviderFieldNumber;
const int BINAsset::kParValueFieldNumber;
const int BINAsset::kCashValueFieldNumber;
const int BINAsset::kTrustedIndexFieldNumber;
const int BINAsset::kActiveFieldNumber;
#endif  // !_MSC_VER

BINAsset::BINAsset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINAsset::InitAsDefaultInstance() {
}

BINAsset::BINAsset(const BINAsset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINAsset::SharedCtor() {
  _cached_size_ = 0;
  assetid_ = 0;
  type_ = 0;
  provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parvalue_ = GOOGLE_LONGLONG(0);
  cashvalue_ = GOOGLE_LONGLONG(0);
  trustedindex_ = 0;
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINAsset::~BINAsset() {
  SharedDtor();
}

void BINAsset::SharedDtor() {
  if (provider_ != &::google::protobuf::internal::kEmptyString) {
    delete provider_;
  }
  if (this != default_instance_) {
  }
}

void BINAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINAsset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINAsset_descriptor_;
}

const BINAsset& BINAsset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_2eproto();
  return *default_instance_;
}

BINAsset* BINAsset::default_instance_ = NULL;

BINAsset* BINAsset::New() const {
  return new BINAsset;
}

void BINAsset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    assetid_ = 0;
    type_ = 0;
    if (has_provider()) {
      if (provider_ != &::google::protobuf::internal::kEmptyString) {
        provider_->clear();
      }
    }
    parvalue_ = GOOGLE_LONGLONG(0);
    cashvalue_ = GOOGLE_LONGLONG(0);
    trustedindex_ = 0;
    active_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 assetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assetid_)));
          set_has_assetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_provider;
        break;
      }

      // required string provider = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_provider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->provider().data(), this->provider().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_parValue;
        break;
      }

      // optional int64 parValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parvalue_)));
          set_has_parvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cashValue;
        break;
      }

      // required int64 cashValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cashValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cashvalue_)));
          set_has_cashvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_trustedIndex;
        break;
      }

      // required int32 trustedIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trustedIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trustedindex_)));
          set_has_trustedindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_active;
        break;
      }

      // required bool active = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 assetId = 1;
  if (has_assetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->assetid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required string provider = 3;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->provider().data(), this->provider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->provider(), output);
  }

  // optional int64 parValue = 4;
  if (has_parvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->parvalue(), output);
  }

  // required int64 cashValue = 5;
  if (has_cashvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->cashvalue(), output);
  }

  // required int32 trustedIndex = 6;
  if (has_trustedindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->trustedindex(), output);
  }

  // required bool active = 7;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINAsset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 assetId = 1;
  if (has_assetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->assetid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required string provider = 3;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->provider().data(), this->provider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->provider(), target);
  }

  // optional int64 parValue = 4;
  if (has_parvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->parvalue(), target);
  }

  // required int64 cashValue = 5;
  if (has_cashvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->cashvalue(), target);
  }

  // required int32 trustedIndex = 6;
  if (has_trustedindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->trustedindex(), target);
  }

  // required bool active = 7;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINAsset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 assetId = 1;
    if (has_assetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assetid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string provider = 3;
    if (has_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provider());
    }

    // optional int64 parValue = 4;
    if (has_parvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parvalue());
    }

    // required int64 cashValue = 5;
    if (has_cashvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cashvalue());
    }

    // required int32 trustedIndex = 6;
    if (has_trustedindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trustedindex());
    }

    // required bool active = 7;
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINAsset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINAsset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINAsset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINAsset::MergeFrom(const BINAsset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assetid()) {
      set_assetid(from.assetid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_provider()) {
      set_provider(from.provider());
    }
    if (from.has_parvalue()) {
      set_parvalue(from.parvalue());
    }
    if (from.has_cashvalue()) {
      set_cashvalue(from.cashvalue());
    }
    if (from.has_trustedindex()) {
      set_trustedindex(from.trustedindex());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINAsset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINAsset::CopyFrom(const BINAsset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINAsset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000077) != 0x00000077) return false;

  return true;
}

void BINAsset::Swap(BINAsset* other) {
  if (other != this) {
    std::swap(assetid_, other->assetid_);
    std::swap(type_, other->type_);
    std::swap(provider_, other->provider_);
    std::swap(parvalue_, other->parvalue_);
    std::swap(cashvalue_, other->cashvalue_);
    std::swap(trustedindex_, other->trustedindex_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINAsset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINAsset_descriptor_;
  metadata.reflection = BINAsset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINAssetConfigResponse::kResponseCodeFieldNumber;
const int BINAssetConfigResponse::kMessageFieldNumber;
const int BINAssetConfigResponse::kAssetsFieldNumber;
#endif  // !_MSC_VER

BINAssetConfigResponse::BINAssetConfigResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINAssetConfigResponse::InitAsDefaultInstance() {
}

BINAssetConfigResponse::BINAssetConfigResponse(const BINAssetConfigResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINAssetConfigResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINAssetConfigResponse::~BINAssetConfigResponse() {
  SharedDtor();
}

void BINAssetConfigResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINAssetConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINAssetConfigResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINAssetConfigResponse_descriptor_;
}

const BINAssetConfigResponse& BINAssetConfigResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_2eproto();
  return *default_instance_;
}

BINAssetConfigResponse* BINAssetConfigResponse::default_instance_ = NULL;

BINAssetConfigResponse* BINAssetConfigResponse::New() const {
  return new BINAssetConfigResponse;
}

void BINAssetConfigResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  assets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINAssetConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_assets;
        break;
      }

      // repeated .BINAsset assets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_assets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINAssetConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // repeated .BINAsset assets = 3;
  for (int i = 0; i < this->assets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->assets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINAssetConfigResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // repeated .BINAsset assets = 3;
  for (int i = 0; i < this->assets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->assets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINAssetConfigResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  // repeated .BINAsset assets = 3;
  total_size += 1 * this->assets_size();
  for (int i = 0; i < this->assets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINAssetConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINAssetConfigResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINAssetConfigResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINAssetConfigResponse::MergeFrom(const BINAssetConfigResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  assets_.MergeFrom(from.assets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINAssetConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINAssetConfigResponse::CopyFrom(const BINAssetConfigResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINAssetConfigResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < assets_size(); i++) {
    if (!this->assets(i).IsInitialized()) return false;
  }
  return true;
}

void BINAssetConfigResponse::Swap(BINAssetConfigResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    assets_.Swap(&other->assets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINAssetConfigResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINAssetConfigResponse_descriptor_;
  metadata.reflection = BINAssetConfigResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINExchangeAssetRequest::kAssetIdFieldNumber;
const int BINExchangeAssetRequest::kAmountFieldNumber;
#endif  // !_MSC_VER

BINExchangeAssetRequest::BINExchangeAssetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINExchangeAssetRequest::InitAsDefaultInstance() {
}

BINExchangeAssetRequest::BINExchangeAssetRequest(const BINExchangeAssetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINExchangeAssetRequest::SharedCtor() {
  _cached_size_ = 0;
  assetid_ = 0;
  amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINExchangeAssetRequest::~BINExchangeAssetRequest() {
  SharedDtor();
}

void BINExchangeAssetRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINExchangeAssetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINExchangeAssetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINExchangeAssetRequest_descriptor_;
}

const BINExchangeAssetRequest& BINExchangeAssetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_2eproto();
  return *default_instance_;
}

BINExchangeAssetRequest* BINExchangeAssetRequest::default_instance_ = NULL;

BINExchangeAssetRequest* BINExchangeAssetRequest::New() const {
  return new BINExchangeAssetRequest;
}

void BINExchangeAssetRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    assetid_ = 0;
    amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINExchangeAssetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 assetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assetid_)));
          set_has_assetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // required int32 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINExchangeAssetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 assetId = 1;
  if (has_assetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->assetid(), output);
  }

  // required int32 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINExchangeAssetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 assetId = 1;
  if (has_assetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->assetid(), target);
  }

  // required int32 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINExchangeAssetRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 assetId = 1;
    if (has_assetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assetid());
    }

    // required int32 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINExchangeAssetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINExchangeAssetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINExchangeAssetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINExchangeAssetRequest::MergeFrom(const BINExchangeAssetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assetid()) {
      set_assetid(from.assetid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINExchangeAssetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINExchangeAssetRequest::CopyFrom(const BINExchangeAssetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINExchangeAssetRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BINExchangeAssetRequest::Swap(BINExchangeAssetRequest* other) {
  if (other != this) {
    std::swap(assetid_, other->assetid_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINExchangeAssetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINExchangeAssetRequest_descriptor_;
  metadata.reflection = BINExchangeAssetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINExchangeAssetResponse::kResponseCodeFieldNumber;
const int BINExchangeAssetResponse::kMessageFieldNumber;
#endif  // !_MSC_VER

BINExchangeAssetResponse::BINExchangeAssetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINExchangeAssetResponse::InitAsDefaultInstance() {
}

BINExchangeAssetResponse::BINExchangeAssetResponse(const BINExchangeAssetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINExchangeAssetResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINExchangeAssetResponse::~BINExchangeAssetResponse() {
  SharedDtor();
}

void BINExchangeAssetResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINExchangeAssetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINExchangeAssetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINExchangeAssetResponse_descriptor_;
}

const BINExchangeAssetResponse& BINExchangeAssetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_2eproto();
  return *default_instance_;
}

BINExchangeAssetResponse* BINExchangeAssetResponse::default_instance_ = NULL;

BINExchangeAssetResponse* BINExchangeAssetResponse::New() const {
  return new BINExchangeAssetResponse;
}

void BINExchangeAssetResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINExchangeAssetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINExchangeAssetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINExchangeAssetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINExchangeAssetResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINExchangeAssetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINExchangeAssetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINExchangeAssetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINExchangeAssetResponse::MergeFrom(const BINExchangeAssetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINExchangeAssetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINExchangeAssetResponse::CopyFrom(const BINExchangeAssetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINExchangeAssetResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINExchangeAssetResponse::Swap(BINExchangeAssetResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINExchangeAssetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINExchangeAssetResponse_descriptor_;
  metadata.reflection = BINExchangeAssetResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
